// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	kit "github.com/uala-challenge/event-processor/kit"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Accept provides a mock function with given fields: ctx, tweet
func (_m *Service) Accept(ctx context.Context, tweet kit.Tweet) error {
	ret := _m.Called(ctx, tweet)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, kit.Tweet) error); ok {
		r0 = rf(ctx, tweet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
